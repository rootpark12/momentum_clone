JS와 CSS를 이어주는것 - HTML
HTML을 실행함으로 CSS와 JS도 갖고 온다.

integer,float
String

consol.log(); ~ 콘솔에 값을 출력하는 명령어

# const → 변수 선언을 통해 코드를 간결하게

const a = 10;
const b = 2;

console.log(a + b);
console.log(a * b);
console.log(a / b);


let a = b;
let a = c;
//재선언 금지

let a = b;
a = c;
//재할당은 가능

const a = b;
const a = c;
//재선언 금지

const a = b;
a = c;
//재할당 금지

var a = b;
var a = c;
a = d;
//재선언, 재할당 가능

# 길이가 긴 변수를 선언할 때 → Camelcase

ex. VeryLongVariableName 카멜

cf. Python에서는 very_long_variable_name 스네이크

const
let

변수만들때 let, const, var차이

let 재선언 금지, 재할당 가능
const 재선언 금지, 재할당 금지
var 재선언 가능, 재할당 가능


boolean ~ true or false
    false ~ false라는 값이 존재, 값의 부재X

null ~ 값이 없음, 비어있음 - 값이 없다(null)라는 값이 존재, 자연적으로 발생X
    안에 값이 없다는걸 확실히 표현하기 위해 사용

undefined ~ 변수는 존재하지만, 값이 정의되지 않은 상태

array

const daysOfWeek = ["mon", "tue", "wed", "thu", "fri", "sat"];
console.log(daysOfWeek);

//배열에서 요소 가져오기
console.log(daysOfWeek[4]); // daysOfWeek배열의 5번째 요소 출력
    컴퓨터는 0부터 숫자를 센다! 0,1,2,3...

//배열에 요소 추가하기
daysOfWeek.push("sun") //push는 배열에 요소를 추가한다.
console.log(daysOfWeek);


Object

const player = {
    name: "nico",
    points: 10,
    fat: true,
};
//각요소들의 의미를 설명가능
//오브젝트의 요소들을 불러오기
console.log(player);
console.log(player.name);
console.log(player["name"]);

//오브젝트의 요소를 수정하기
console.log(player.fat);fat = true;
player.fat = false;
console.log(player.fat);//fat = false;
player.points = player.point + 15 // 요소에 숫자 더하기
    const의 값 자체를 바꾸는것은 불가능 하나 그것 안의 요소를 바꾸는건 가능

//오브젝트에 요소 추가하기
console.log(player);
player.lastname = "potato"
console.log(player);

 function

 function sayHello(){
    console.log("Hello! my name is C");
 }
 sayHello(); //function  실행
 function sayHello(){} // () 이부분에 데이터를 넣을수 있다, argument

function sayHello(nameOfPerson){
    console.log(nameOfPerson); // nico, dal, lynn
 }

sayHello("nico")// argument를 넣고 실행
sayHello("dal")
sayHello("lynn")

여러개의 argument를 넣는거도 가능

fuㅜction sayHello(nameOfPerson, age){
    console.log("Hello, my name is" + nameOfPerson + "and I am " + age); 
}// Hello, my name is nico, and i am 10 ...

sayHello("nico", 10)
// 첫번째 argument는 nameOfPerson, 두번째는 age ... 순서는 중요하다.
sayHello("dal", 23)
sayHello("lynn", 21)

오브젝트 내부에서 function 살행하기
const player = {
    name: "nico",
    sayHello: function(OtherPersonsName){ 
        // 외부에서 argument를 받을수 있게

        consol.log("hello!" + OtherPersonsName + "nice to meet you!");
    },
};

console.log(player.name);
player.sayHello("lynn");

계산기 만들기

const calculator = {
    add: function (a,b) {
        console.log(a+b);
    },

    min: function (a,b) {
        console.log(a-b);
    },

    mul: function (a,b) {
        console.log(a*b);
    },

    div: function (a,b){
        console.log(a/b);
    },

    square: function(a,b) {
        console.log(a**b);
    }

};

calculator.add(2,3);
calculator.min(3,2);
calculator.mul(2,3);
calculator.div(3,2);
calculator.square(2,3);

~ console 이나 alert으로는 결과값이 출력은 되지만 남길수는 없다.

recap

let과 const의 차이는 let은 업데이트를 할 수 있다는 것이다.
let을 업데이트 할 땐 다시 let을 붙이지 않아도 됨.
    ex) 기존 변수의 값을 업뎃하고 싶은 경우
    let a = 5; // 기존의 값이 5인 상태
    a = 10; // let을 생략하고 10으로 업데이트했음.

코드를 읽으면서 의미를 부여하기 위해 항상 const, 
가끔 let ,
사용하지 말아야할 var.

boolean은 딱 두 가지 옵션만 있다. ture, false.
 
null은 아예 '비어있음을 정의'해버리는것,
undefinde는 변수에  값을 부여하지 않은 상태.

array 만들기
ex)
const days = [1, 2, "안녕하세요" , 'abc' , false , null]
호출시에는 ? console.log(days[2]) // 인덱스 2번인 "안녕하세요"가 로그에 출력될 예정

array에 무언갈 업데이트 하고 싶을 때에 직접 변경하기.
ex)
days[2] = "water" // 데이라는 변수의 오브젝트 인덱스 2번인 "안녕하세요"를 
"water"로 교체한다는 뜻.

.push() 로는 추가를 할 수 있음.
ex)
days.push('생선') // days라는 변수에 '생선'이라는 string 값을 추가해준것.

const의 object 값을 변경하는 행위는 const 자체를 변경하는 것이 아니고
 objects값을 변경하는 것이기 때문에 재할당 오류와 관계없다.

returns

const age = 96;
function calculateKrAge(ageOfForeigner) {
    ageOfForeigner + 2;
}
const krAge = calculateKrAge(age);
console.log(krAge);

// krAge - undefined // 왜?
//return 을 안받아서 그렇다

const age = 96;
function calculateKrAge(ageOfForeigner) {
    return ageOfForeigner + 2;
}
const krAge = calculateKrAge(age);
console.log(krAge);// 98

//function의 외부에서 값을 받는것이 좋은방법 
//return을 통해 function밖으로 결과를 낼 수 있다.
//return을 한뒤 function은 종료된다.

const calculator = {
    add: function (a,b) {
        // console.log(a+b);
        return a+b;
    },

    min: function (a,b) {
        //console.log(a-b);
        return a-b;
    },

    mul: function (a,b) {
        //console.log(a*b);
        return a*b;
    },

    div: function (a,b){
        //console.log(a/b);
        return a/b;
    },

    square: function(a,b) {
        //console.log(a**b);
        //return a**b;
    }

};

const plusResult = calculator.plus(2,3);
const minResult = calculator.min(plusResult,10);
const mulResult = calculator.mul(10,minResult);
const divResult = calculator.div(mulResult,mulResult);
const squResult = calculator.square(divResult,minResult);


conditional

prompt();라는 함수는 사용자에게 창을 띄어 값을 받음.
prompt();를 사용하면 답을 할때까지 코드의 실행을 멈추고, 매우 오래된 방법임. 별로 안이쁨. css로 바꾸지도 못함.
const age = prompt("how old are you?");
console.log(typeof age);
typeof라는 키워드를 쓰면 type를 볼 수 있는데, prompt();에서 숫자를 입력해도 string이라고 뜬다. string이 디폴트이기 때문이다.

한 type로 받아서 다른 type로 바꾸는 작업을 해야한다. "15"-->15
string-->number로 변환해주는 함수 parseInt();
console.log(typeof "15", typeof parseInt("15")); --> string number
이렇게 숫자로 변환이 되야 비교를 할 수 있다.
참고로 "숫자"가 아닌게 입력되면 변환이 안됨. NaN(not a number)

const age = parseInt(prompt("how old are you?"));
console.log(age);

데이터의 타입을 바꾸기
const age1 = parseInt(prompt("How old are you?"));
const age2 = prompt("How old are you?");
console.log(age1);
console.log(age2);

데이터 검사하고 기능실행

const age = parseInt(prompt("How old are you?"));
if (isNaN(age)) {
    console.log("Please write a number")//true
}else{
    console.log("Thank you for writing your age")//false 
}

if (isNaN(age)) {
    console.log("Please write a number");//true
}else if(age < 18){
    console.log("Please write a number");
}else{
    console.log("You can drink");
}



true || true === true
false || true === true
true || false === true
false || false === false


true && true === true
false && true === false
true && false === false
false && false === false

recap

1. ==는 동등연산자, 값만 같으면 true이다

2. ===는 일치연산저, 값과 값의 종류(Data Type)가 모두 같은지를 비교해서, 
같으면 true, 다르면 false라고 한다.

3. ex)alert(1 == '1') //true
alert(1 === '1') //false
alert(null == undefined) //true
alert(null === undefined) //false
alert(true == 1); //true
alert(true === 1) //false
alert(true == '1') //true
alert(true === '1') //false

4. 배열형 : 배열의 데이터 값이 같더라도 배열을 할당할때,
 각 변수는 각 메모리의 주소를 참조한다. 참조하는 메모리의 주소가 다르기 
 때문에 두 배열은 같지 않다.
var a = [1,2,3];
var b = [1,2,3];
console.log(a == b); // false
console.log(a === b); // false

5. 객체형도 배열형과 같다.
var x = {};
var y = {};
console.log(x == y) // false
console.log(x === y) // false

6. ==(동등연산자)보다는 ===(일치연산자)를 사용하자


JAVASCRIPT ON THE BROWSER

document object
 
HTML : CSS와 JS를 가져오는 풀과 같은 도구, Js는 HTML과 상호작용을 위해 사용.
> JS는 애초에 HTML에 접근, 읽기가 가능하도록 구성(configured)되어 있다.
즉, JS는 그냥 HTML을 자동으로 읽는다. 추가적으로 뭔가 설치할 필요도 없다.

이렇게 HTML문서를 그대로 JS의 방식으로 보기 때문에, 이 웹페이지(문서)전체는
이미 Document라는 객체로 정의되어 있다. (선언)

콘솔에서 console.dir(document);
document 의 속성을 확인할 수 있다. (객체)

 HTML in Javascript 

document.getElementById("title");
    ~ 문서의 element들을 id를 통해 가져올수 있고, 수정할 수 있다.
        (class 등으로도 가능 : document.getElementsByClassName)
            여러개의 element들을 가져올때 사용
        ~tag로도 가능        
    ~ HTML이 아닌 자바스크립트에서 변경! \

- getElementsByClassName() : 많은 element를 가져올때 씀(array를 반환)
- getElementsByTagName() : name을 할당할 수 있음(array를 반환)
- querySelector : element를 CSS selector방식으로 검색할 수 있음
 (ex. h1:first-child)
단 하나의 element를 return해줌
⇒ hello란 class 내부에 있는 h1을 가지고 올 수 있다(id도 가능함)
- 첫번째 element만 가져옴
- 조건에 맞는 세개 다 가져오고 싶으면 querySelectorAll
⇒ 세개의 h1이 들어있는 array를 가져다 줌
- querySelector("#hello); 와 getElementById("hello"); 
는 같은 일을 하는 것임
하지만 후자는 하위요소 가져오는 것을 못하므로 전자만 쓸거다

Event

- 지금 js파일이 있기 때문에 js를 통해 html의 내용을 가져올 수 있는 거임
- document가 html이 js파일을 load하기 때문에 존재 → 그 다음에 browser가 우리가 document에 접근할 수 있게 해줌
- element의 내부를 보고 싶으면 console.dir()
기본적으로 object로 표시한 element를 보여줌(전부 js object임)
그 element 중 앞에 on이 붙은 것들은 event임
- event: 어떤 행위를 하는 것
모든 event는 js가 listen할 수 있음
- eventListener : event를 listen함 → js에게 무슨 event를 listen하고 싶은 지 알려줘야 함
- title.addEventListener("click") : 누군가가 title을 click하는 것을 listen할 거임 → 무언가를 해줘야함

const title = document.querySelector("div.hello:first-child h1");

function handleTitleClick(){
title.style.color = "blue";
}
title.addEventListener("click",handleTitleClick);
//click하면 handleTitleClick이라는 function이 동작하길 원함
//그래서 handle~ 함수에 () 를 안넣은 것임
//즉, js가 대신 실행시켜주길 바라는 것임!

- function이 js에게 넘겨주고 유저가 title을 click할 경우에 js가 실행버튼을 대신 눌러주길 바라는 것임( 직접 handleTitleClick(); 이렇게 하는 것이 아니라)
- 함수에서 () 이 두 괄호를 추가함으로써 실행버튼을 누를 수 있는 거임


listen하고 싶은 event 찾는 방법!
1. 구글에 찾고 싶은 element의 이름 검색하기 ex) h1 html element mdn(mozilla developer network)
2. 그 중에서 web APIs 이 포함된 페이지 찾기 (JS 관점의 HTML heading element란 의미)

console.dir을 통해서 element를 console에 출력시키기 console.dir(title);=> 여기서도 사용가능한 event 찾을 수 있다. property 이름 앞에 on 이 있다면 그게 바로 event listener!!!! 사용할때는 on 빼고 쓰기


CSS in Javascript

style은 CSS를 통해서 변경되어야 한다.

function handleTitleClick() {
    const currentColor = h1.style.color;
    if (currentColor === "blue") {
        h1.style.color = "tomato";
    }else{
        h1.style.color = "blue";
    }
}
h1.addEventListener("click", handleTitleClick); 

코드 깔끔하게 만들기

function handleTitleClick() {
    const currentColor = h1.style.color;
    let newColor //let은 값은 변경 가능!
    if (currentColor === "blue") {
        newColor = "tomato"
    }else{
        newColor = "blue"
    }
    h1.style.color = newColor;
}   
h1.addEventListener("click", handleTitleClick); 

1) click event 발생 및 함수 실행
2) currentColor 변수 선언 후 h1.style.color 값 복사 (getter)
3) newColor 변수 선언
4) currentColor 현재 값 확인
5) 조건에 따라 newColor에 "tomato" or "blue" 값 대입
6) 마지막으로 h1.style.color에 newColor값 대입 (setter)



style을 CSS 통해 변경하기

CSS---
h1{
    color: blue;
}
.active{
    color: tomato;
}

JS---
const h1 = document.querySelector("div.hello:first-child h1")
function handleTitleClick(){
    h1.className = "active";
}
h1.addEventListener("click", handleTitleClick); 

// 더 적은 코드를 통해 CSS를 변경하였다


function handleTitleClick(){
    if (h1.className === "active") {
        h1.className = "";
    }else{
        h1.className = "active";
    }
  
}

//클릭했을때 번갈아 변하도록 하였다. (토글)
//String을 2번 사용하였는데("active"), 이것은 에러의 원인이 될 수 있다.
// 반복될 여지가 있다면 변수에 넣어 사용하는것이 좋다
// 만에하나 오타가 있어 에러가 생겨도  자바스크립트에서도 인식함


function handleTitleClick(){
    const clickedClass = "clicked"; //****
    if (h1.className === clickedClass) {
        h1.className = "";
    }else{
        h1.className = clickedClass;
    }
  
}


classList:
    우리가 명시한 class가 HTML element의 class에 포함되어 있는지
    알려주는 function
        h1.classList.contains(clickedClass)
        h1.classList.remove(clickedClass)
        h1.classList.add(clickedClass)

function handleTitleClick(){
    const clickedClass = "clicked";
    if (h1.classList.contains(clickedClass)) {
        h1.classList.remove(clickedClass);
    }else{
        h1.classList.add(clickedClass);
    }
  
}

기존에 있던 class를 지우지 않고도 토글이 되며, class를 추가할 수 있다.

function handleTitleClick(){
    h1.classList.toggle("clicked")
}
토글은 이 한줄로 다 할 수 있다
toggle function : class name이 존재하는지 확인함.
만약 class name이 존재한다면 toggle은 class name을 제거한다.
class name이 존재하지 않는다면 toggle은 class name을 추가한다.

input값 가져오기
const loginInput = document.querySelector("#login-form input");
const loginButton = document.querySelector("#login-form button");

function onLoginBtnClcick(){
    console.log(loginInput.value);
}
loginButton.addEventListener("click",onLoginBtnClcick);

유효성검사
const username = loginInput.value;
    if(username === ""){// 공백검사
        alert("Please write your name");
    }else if(username.length > 15){// 길이검사
        alert("Your name is too long");
    }

//HTML(브라우저) 부분에서 하는 방법이 있다
<input
    required// 필수입력
    maxlength="15"//최대길이
    type="text"
    placeholder="What is your name?"
>
~ 유효성검사를 작동시키기 위해선 form안에 있어야 한다.
~ JavaScript에서 구현하는 대신 할 수 있다면
 HTML의 기본 속성을 최대한 이용하자



Event

preventDefault: 유저가 submit 했을 때 새로고침이 안 되게 막는 역할 
 
form을 submit하면 브라우저는 기본적으로 페이지를 새로고침 하도록 되어있다.
    << 우리가 원하는 것이 아님!
preventDefault() 함수를 추가함으로써 브라우저의 기본 동작(새로고침 등)을
 막을 수 있다!!

이 preventDefault 함수는 EventListener 함수의 '첫 번째 argument' 안에 있는
함수이다. 첫 arument는 지금 막 벌어진 event들에 대한 정보를 갖고 있다.

JS는(기본적으로)argument를 담아서 함수를 호출하는데, 이 argument가 기본 정보
들을 제공하고 있다.

ex) 누가 submit주체인지, 몇 시에 submit을 했는지 등등 콘솔에 출력해보면 
알 수 있음

addEventListener 안에 있는 함수는 직접 실행하지 않는다
브라우저가 실행시켜주고 브라우저에서 해당 이벤트에 대한 정보 즉, 
object를 가지게 된다.

addEventListener의 함수에서 object에 대한 자리만 할당해주면
해당 이벤트가 발생시킨 정보들에 대한 object들을 볼 수 있다!
ex)
    function handleLinkClick(event){
        event.preventDefault(); ~ 동작 멈춤
        consol.dir(event); ~ event란 오브젝트에 있는 정보들을 본다
    }

이때 해당 이벤트가 가진 기본 Default값을 발생시키지 않기 하게 위해선
preventDefault를 이용하여 막을 수 있다!

Getting Username
로그인을 하면, 로그인form을 사라지게 하자


.hidden{
    display: none;
}//css
//1. 없앨 태그에 class를 지정(form), 해당 class의 태그는 
로그인을 한 뒤엔 사라지도록 만든다

const loginFrom = document.querySelector("#login-form");
const loginInput = document.querySelector("#login-form input");

function onLoginSubmit(event){
    event.preventDefault();
    const username = loginInput.value;
    loginFrom.classList.add("hidden");
    console.log(username);
}
loginFrom.addEventListener("submit",onLoginSubmit);


//2. 표시할 값이 있을때(로그인을 하고 받은 username), 태그(h1)이
 나타나게 한다
const greeting = document.querySelector("#greeting");
greeting.innerText = "Hello, " + username
//값은 받았으나, h1의 hidden class 를 없애야 보인다
const loginFrom = document.querySelector("#login-form");
const loginInput = document.querySelector("#login-form input");
const greeting = document.querySelector("#greeting");
const HIDDEN_CLASSNAME = "hidden";
function onLoginSubmit(event){
    event.preventDefault();
    loginFrom.classList.add(HIDDEN_CLASSNAME);
    const username = loginInput.value;
    greeting.innerText = "Hello, " + username;
    greeting.innerText = `Hello ${username}`;
    // "" '' 이랑 착각하지 말것; ``안에 있어야 변수가 적용된다.
    greeting.classList.remove(HIDDEN_CLASSNAME);
}
loginFrom.addEventListener("submit",onLoginSubmit);

Saving Username 

value(username)을 저장해야 한다.

localStorage를 이용할 수 있다.
~개발자도구-애플리케이션-로컬스토리지에서 저장된 값 확인 가능
localStorage.setItem //저장
localStorage.getItem //가져오기
localStorage.removeItem //삭제

localStorage.setItem("username",username); //key,value

Loading Username

4.7 super recap 반복!


Intervals 
Interval ~ 매번 일어나야 하는일
setInterval(sayHello,5000); 
//5000s(5초) 마다 sayHello 라는 function 실행 (반복 실행)

Timeouts and Date
setTimeout(sayHello,5000);
//5000s(5초) 뒤에 sayHello 라는 function 실행 (1번만 실행)


function getClock(){
    const date = new Date();
    clock.innerText = `${date.getHours()}:${date.getMinutes()}:${date.getUTCSeconds()}`;
}
setInterval(getClock,1000);
1초마다 시간 호출
문제점 ~ 실행하고 1초 뒤에 시간을 보여준다
setInterval 전에 시간을 불러줌으로 해결

PadStart 
한자리숫자 앞에 0이 붙는식으로 표기할 것

"1".padStart(2,"0"); //01
"hello".padstart(20,"x")//xxxxxxxxxxxxxxxhello
//String의 시작(start)부분에 padding을 추가한다. 
//1이라는 문자열의 길이가 2여야 한다, 아닐경우 나머지는 0으로 채운다.

function getClock(){
    const date = new Date();
    const hours = String(date.getHours()).padStart(2,"0");
    const minutes = String(date.getMinutes()).padStart(2,"0");
    const seconds = String(date.getSeconds()).padStart(2,"0");
    clock.innerText = `${hours}:${minutes}:${seconds}`;
}
getClock();
setInterval(getClock,1000);

//date에서 받아온 number를 String으로 받은뒤, padstart 적용